# Generated by Django 5.2.4 on 2025-08-27 05:34

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('subscription', '0002_subscriptionplan_currency_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='subscriptionplan',
            options={'ordering': ['price', 'name']},
        ),
        migrations.AlterField(
            model_name='subscriptionplan',
            name='duration_days',
            field=models.IntegerField(blank=True, help_text='Optional for non-Stripe, fixed-duration access.', null=True),
        ),
        migrations.AlterField(
            model_name='subscriptionplan',
            name='features',
            field=models.JSONField(default=list, help_text='List/JSON of feature flags.'),
        ),
        migrations.AlterField(
            model_name='subscriptionplan',
            name='name',
            field=models.CharField(db_index=True, max_length=100, unique=True),
        ),
        migrations.AlterField(
            model_name='subscriptionplan',
            name='plan_type',
            field=models.CharField(choices=[('monthly', 'Monthly'), ('yearly', 'Yearly'), ('free', 'Free')], db_index=True, default='free', max_length=20),
        ),
        migrations.AlterField(
            model_name='subscriptionplan',
            name='price',
            field=models.DecimalField(decimal_places=2, default=0, help_text='Displayed price (informational; Stripe is source of truth).', max_digits=10),
        ),
        migrations.AlterField(
            model_name='subscriptionplan',
            name='stripe_price_id',
            field=models.CharField(blank=True, help_text='Stripe recurring price id (price_...). Required for paid plans.', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='usersubscription',
            name='current_period_end',
            field=models.DateTimeField(blank=True, db_index=True, null=True),
        ),
        migrations.AlterField(
            model_name='usersubscription',
            name='plan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='subscription.subscriptionplan'),
        ),
        migrations.AlterField(
            model_name='usersubscription',
            name='start_date',
            field=models.DateTimeField(auto_now_add=True, db_index=True),
        ),
        migrations.AlterField(
            model_name='usersubscription',
            name='status',
            field=models.CharField(db_index=True, default='active', max_length=50),
        ),
        migrations.AlterField(
            model_name='usersubscription',
            name='stripe_customer_id',
            field=models.CharField(blank=True, db_index=True, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='usersubscription',
            name='stripe_subscription_id',
            field=models.CharField(blank=True, db_index=True, max_length=200, null=True),
        ),
        migrations.AddIndex(
            model_name='usersubscription',
            index=models.Index(fields=['user'], name='subscriptio_user_id_8bb10f_idx'),
        ),
        migrations.AddIndex(
            model_name='usersubscription',
            index=models.Index(fields=['stripe_subscription_id'], name='subscriptio_stripe__8de137_idx'),
        ),
        migrations.AddIndex(
            model_name='usersubscription',
            index=models.Index(fields=['status', 'is_active'], name='subscriptio_status_461460_idx'),
        ),
        migrations.AddConstraint(
            model_name='subscriptionplan',
            constraint=models.CheckConstraint(condition=models.Q(('price__gte', 0)), name='plan_price_nonnegative'),
        ),
        migrations.AddConstraint(
            model_name='subscriptionplan',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('plan_type', 'free'), ('price', 0)), models.Q(('plan_type', 'free'), _negated=True), _connector='OR'), name='free_plan_price_zero'),
        ),
    ]
